src/
  ├── components/
  │   ├── common/
  │   ├── layout/
  │   └── quiz/
  ├── pages/
  ├── store/
  ├── hooks/
  ├── utils/
  ├── services/
  └── styles/



  // src/pages/Home.jsx
import { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchQuizzes } from '../store/slices/quizSlice';
import QuizCard from '../components/quiz/QuizCard';

const Home = () => {
  const dispatch = useDispatch();
  const { quizzes, status } = useSelector(state => state.quiz);

  useEffect(() => {
    dispatch(fetchQuizzes());
  }, [dispatch]);

  if (status === 'loading') {
    return <div>Loading quizzes...</div>;
  }

  return (
    <div>
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Available Quizzes</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {quizzes.map(quiz => (
          <QuizCard key={quiz._id} quiz={quiz} />
        ))}
      </div>
    </div>
  );
};

export default Home;

// src/pages/Quiz.jsx
import { useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { fetchQuizById, submitAnswer } from '../store/slices/quizSlice';
import QuestionCard from '../components/quiz/QuestionCard';
import QuizResults from '../components/quiz/QuizResults';

const Quiz = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const { currentQuiz, currentQuestion, showResults, results } = useSelector(
    state => state.quiz
  );

  useEffect(() => {
    dispatch(fetchQuizById(id));
  }, [dispatch, id]);

  const handleAnswer = (answer) => {
    dispatch(submitAnswer(answer));
  };

  if (showResults) {
    return <QuizResults results={results} onRetry={() => dispatch(resetQuiz())} />;
  }

  return (
    <div className="max-w-2xl mx-auto">
      <QuestionCard
        question={currentQuiz?.questions[currentQuestion]}
        onAnswer={handleAnswer}
        timeLeft={timeLeft}
      />
    </div>
  );
};

export default Quiz;

// src/pages/Dashboard.jsx
import { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchUserStats } from '../store/slices/userSlice';

const Dashboard = () => {
  const dispatch = useDispatch();
  const { stats } = useSelector(state => state.user);

  useEffect(() => {
    dispatch(fetchUserStats());
  }, [dispatch]);

  return (
    <div>
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Your Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-xl font-semibold mb-2">Total Quizzes</h3>
          <p className="text-3xl font-bold text-indigo-600">
            {stats.totalQuizzes}
          </p>
        </div>
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-xl font-semibold mb-2">Average Score</h3>
          <p className="text-3xl font-bold text-green-600">
            {stats.averageScore}%
          </p>
        </div>
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-xl font-semibold mb-2">Best Score</h3>
          <p className="text-3xl font-bold text-blue-600">{stats.bestScore}%</p>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;

------------------------------------------------------------------


// src/components/auth/LoginForm.jsx
import { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { login } from '../../store/slices/authSlice';

const LoginForm = () => {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [error, setError] = useState('');
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await dispatch(login(formData)).unwrap();
      navigate('/dashboard');
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 max-w-md mx-auto">
      {error && (
        <div className="bg-red-100 text-red-700 p-3 rounded-md">{error}</div>
      )}
      <div>
        <label className="block text-sm font-medium text-gray-700">Email</label>
        <input
          type="email"
          value={formData.email}
          onChange={(e) => setFormData({ ...formData, email: e.target.value })}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          required
        />
      </div>
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Password
        </label>
        <input
          type="password"
          value={formData.password}
          onChange={(e) => setFormData({ ...formData, password: e.target.value })}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          required
        />
      </div>
      <button
        type="submit"
        className="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700"
      >
        Login
      </button>
    </form>
  );
};

export default LoginForm;


-------------------------------------------------------------------------------
// src/components/quiz/QuizCard.jsx
import { Link } from 'react-router-dom';

const QuizCard = ({ quiz }) => {
  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h3 className="text-xl font-semibold text-gray-800">{quiz.title}</h3>
      <p className="text-gray-600 mt-2">{quiz.description}</p>
      <div className="flex items-center mt-4">
        <span className="bg-indigo-100 text-indigo-800 px-2 py-1 rounded text-sm">
          {quiz.difficulty}
        </span>
        <span className="ml-4 text-gray-600">
          {quiz.questions.length} questions
        </span>
      </div>
      <Link
        to={`/quiz/${quiz._id}`}
        className="mt-4 inline-block bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700"
      >
        Start Quiz
      </Link>
    </div>
  );
};

export default QuizCard;

// src/components/quiz/QuestionCard.jsx
const QuestionCard = ({ question, onAnswer, timeLeft }) => {
  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex justify-between items-center mb-4">
        <span className="text-gray-600">Time left: {timeLeft}s</span>
        <span className="bg-indigo-100 text-indigo-800 px-2 py-1 rounded">
          {question.points} points
        </span>
      </div>
      <h3 className="text-xl font-semibold text-gray-800 mb-4">
        {question.question}
      </h3>
      <div className="space-y-3">
        {question.options.map((option, index) => (
          <button
            key={index}
            onClick={() => onAnswer(option)}
            className="w-full text-left p-4 rounded-md border border-gray-300 hover:border-indigo-500 hover:bg-indigo-50"
          >
            {option.text}
          </button>
        ))}
      </div>
    </div>
  );
};

export default QuestionCard;

// src/components/quiz/QuizResults.jsx
const QuizResults = ({ results, onRetry }) => {
  return (
    <div className="bg-white rounded-lg shadow-md p-6 text-center">
      <h2 className="text-2xl font-bold text-gray-800 mb-4">Quiz Complete!</h2>
      <div className="space-y-4 mb-6">
        <div>
          <p className="text-xl">Your Score</p>
          <p className="text-3xl font-bold text-indigo-600">
            {results.score} points
          </p>
        </div>
        <div>
          <p className="text-xl">Correct Answers</p>
          <p className="text-2xl font-semibold text-green-600">
            {results.correctAnswers}/{results.totalQuestions}
          </p>
        </div>
        <div>
          <p className="text-xl">Time Taken</p>
          <p className="text-2xl font-semibold text-blue-600">
            {results.timeTaken} seconds
          </p>
        </div>
      </div>
      <button
        onClick={onRetry}
        className="bg-indigo-600 text-white px-6 py-2 rounded-md hover:bg-indigo-700"
      >
        Try Again
      </button>
    </div>
  );
};

export default QuizResults;


------------------------------------------------------------

// src/pages/Home.jsx
import { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchQuizzes } from '../store/slices/quizSlice';
import QuizCard from '../components/quiz/QuizCard';

const Home = () => {
  const dispatch = useDispatch();
  const { quizzes, status } = useSelector(state => state.quiz);

  useEffect(() => {
    dispatch(fetchQuizzes());
  }, [dispatch]);

  if (status === 'loading') {
    return <div>Loading quizzes...</div>;
  }

  return (
    <div>
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Available Quizzes</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {quizzes.map(quiz => (
          <QuizCard key={quiz._id} quiz={quiz} />
        ))}
      </div>
    </div>
  );
};

export default Home;

// src/pages/Quiz.jsx
import { useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { fetchQuizById, submitAnswer } from '../store/slices/quizSlice';
import QuestionCard from '../components/quiz/QuestionCard';
import QuizResults from '../components/quiz/QuizResults';

const Quiz = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const { currentQuiz, currentQuestion, showResults, results } = useSelector(
    state => state.quiz
  );

  useEffect(() => {
    dispatch(fetchQuizById(id));
  }, [dispatch, id]);

  const handleAnswer = (answer) => {
    dispatch(submitAnswer(answer));
  };

  if (showResults) {
    return <QuizResults results={results} onRetry={() => dispatch(resetQuiz())} />;
  }

  return (
    <div className="max-w-2xl mx-auto">
      <QuestionCard
        question={currentQuiz?.questions[currentQuestion]}
        onAnswer={handleAnswer}
        timeLeft={timeLeft}
      />
    </div>
  );
};

export default Quiz;

// src/pages/Dashboard.jsx
import { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchUserStats } from '../store/slices/userSlice';

const Dashboard = () => {
  const dispatch = useDispatch();
  const { stats } = useSelector(state => state.user);

  useEffect(() => {
    dispatch(fetchUserStats());
  }, [dispatch]);

  return (
    <div>
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Your Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-xl font-semibold mb-2">Total Quizzes</h3>
          <p className="text-3xl font-bold text-indigo-600">
            {stats.totalQuizzes}
          </p>
        </div>
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-xl font-semibold mb-2">Average Score</h3>
          <p className="text-3xl font-bold text-green-600">
            {stats.averageScore}%
          </p>
        </div>
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-xl font-semibold mb-2">Best Score</h3>
          <p className="text-3xl font-bold text-blue-600">{stats.bestScore}%</p>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;


-------------------------------------------------
REDUX SLICES 


// src/services/authService.js
const authService = {
  login: async (credentials) => {
    const response = await axios.post('/api/auth/login', credentials);
    return response.data;
  },
  register: async (userData) => {
    const response = await axios.post('/api/auth/register', userData);
    return response.data;
  }
};

// src/services/quizService.js
const quizService = {
  getQuizzes: async () => {
    const response = await axios.get('/api/quizzes');
    return response.data;
  },
  getQuizById: async (id) => {
    const response = await axios.get(`/api/quizzes/${id}`);
    return response.data;
  }
};

// src/services/userService.js
const userService = {
  getUserStats: async () => {
    const response = await axios.get('/api/user/stats');
    return response.data;
  }
};